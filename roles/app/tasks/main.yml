---
- name: Ensure base packages are installed
  apt:
    name:
      - curl
      - git
      - nginx
      - acl
    state: present
    update_cache: yes
  tags: ["app"]

- name: Add NodeSource APT repository for Node.js 20.x
  shell: |
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  args:
    executable: /bin/bash
    creates: /etc/apt/sources.list.d/nodesource.list
  tags: ["app"]

- name: Install Node.js and build essentials
  apt:
    name:
      - nodejs
      - build-essential
    state: present
    update_cache: yes
  tags: ["app"]

- name: Create application user
  user:
    name: "{{ app_user }}"
    system: true
    create_home: true
  tags: ["app"]

- name: Ensure application directory exists
  file:
    path: "{{ app_install_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0755"
  tags: ["app"]

- name: Fail if app_repo_url is not provided
  fail:
    msg: "app_repo_url must be provided (e.g. -e app_repo_url=https://github.com/you/your-repo.git)"
  when: app_repo_url is not defined or app_repo_url | length == 0
  tags: ["app"]

- name: Clone application repository
  git:
    repo: "{{ app_repo_url }}"
    dest: "{{ app_install_dir }}"
    force: true
  become: true
  become_user: "{{ app_user }}"
  notify: Restart nodeapp
  tags: ["app"]

- name: Check for package.json in repository root
  stat:
    path: "{{ app_install_dir }}/package.json"
  register: pkg_root
  tags: ["app"]

- name: Check for package.json in app subdirectory
  stat:
    path: "{{ app_install_dir }}/app/package.json"
  register: pkg_sub
  tags: ["app"]

- name: Set application source directory
  set_fact:
    app_source_dir: "{{ app_install_dir if pkg_root.stat.exists else app_install_dir ~ '/app' }}"
  when: pkg_root.stat.exists or pkg_sub.stat.exists
  tags: ["app"]

- name: Fail if package.json not found
  fail:
    msg: "package.json not found in {{ app_install_dir }} or {{ app_install_dir }}/app; set app_source_dir explicitly if layout differs."
  when: not (pkg_root.stat.exists or pkg_sub.stat.exists)
  tags: ["app"]

- name: Install npm dependencies (production only)
  shell: |
    set -e
    if [ -f package-lock.json ]; then
      npm ci --omit=dev
    else
      npm install --omit=dev
    fi
  args:
    chdir: "{{ app_source_dir | default(app_install_dir) }}"
  become: true
  become_user: "{{ app_user }}"
  notify: Restart nodeapp
  tags: ["app"]

- name: Build application (if build script exists)
  shell: |
    if npm run | grep -q " build"; then
      npm run build
    else
      echo "No build script, skipping"
    fi
  args:
    chdir: "{{ app_source_dir | default(app_install_dir) }}"
  become: true
  become_user: "{{ app_user }}"
  tags: ["app"]

- name: Deploy systemd service for Node app
  template:
    src: nodeapp.service.j2
    dest: /etc/systemd/system/nodeapp.service
    mode: "0644"
  notify:
    - Reload systemd
    - Restart nodeapp
  tags: ["app"]

- name: Ensure nodeapp service is enabled and started
  systemd:
    name: nodeapp
    state: started
    enabled: true
    daemon_reload: true
  tags: ["app"]

- name: Configure Nginx to reverse proxy to nodeapp
  template:
    src: nginx_nodeapp.conf.j2
    dest: /etc/nginx/sites-available/default
    mode: "0644"
  notify: Restart nginx
  tags: ["app"]

- name: Ensure Nginx is enabled and started
  systemd:
    name: nginx
    state: started
    enabled: true
  tags: ["app"]
